# -*- coding: utf-8 -*-
"""DAtask3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MM9HzIElL1FDFYDt90Js7SZVS9sHiSsq
"""

!pip install pandas plotly kaleido reportlab

import pandas as pd
import plotly.express as px
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch

df = pd.read_csv("/content/Sample - Superstore.csv", encoding="latin1")

df['Order Date'] = pd.to_datetime(df['Order Date'], format='mixed')
df['YearMonth'] = df['Order Date'].dt.to_period("M").astype(str)

total_sales = df["Sales"].sum()
total_profit = df["Profit"].sum()
sales_2020 = df[df["Order Date"].dt.year == 2020]["Sales"].sum()
sales_2019 = df[df["Order Date"].dt.year == 2019]["Sales"].sum()
growth = ((sales_2020 - sales_2019) / sales_2019 * 100) if sales_2019 > 0 else 0

app = JupyterDash(__name__)

app.layout = html.Div([
    html.H1("ğŸ“Š Superstore Interactive Dashboard", style={"textAlign": "center", "color": "#2c3e50"}),

html.Div([
        html.Div([html.H3("ğŸ’° Total Sales"), html.H4(f"${total_sales:,.0f}")],
                 style={"padding":"20px", "background":"#ecf0f1", "margin":"5px", "borderRadius":"10px"}),
        html.Div([html.H3("ğŸ“ˆ Total Profit"), html.H4(f"${total_profit:,.0f}")],
                 style={"padding":"20px", "background":"#ecf0f1", "margin":"5px", "borderRadius":"10px"}),
        html.Div([html.H3("ğŸ“Š Growth (2019â†’2020)"), html.H4(f"{growth:.1f}%")],
                 style={"padding":"20px", "background":"#ecf0f1", "margin":"5px", "borderRadius":"10px"}),
    ], style={"display":"flex","justifyContent":"center"}),

html.Div([
        html.Div([
            html.Label("Region"),
            dcc.Dropdown(
                options=[{"label": r, "value": r} for r in df["Region"].unique()],
                value=df["Region"].unique().tolist(),
                multi=True, id="region_filter")
        ], style={"width":"30%", "display":"inline-block", "padding":"10px"}),

        html.Div([
            html.Label("Category"),
            dcc.Dropdown(
                options=[{"label": c, "value": c} for c in df["Category"].unique()],
                value=df["Category"].unique().tolist(),
                multi=True, id="category_filter")
        ], style={"width":"30%", "display":"inline-block", "padding":"10px"}),

        html.Div([
            html.Label("Date Range"),
            dcc.DatePickerRange(
                id="date_filter",
                start_date=df["Order Date"].min(),
                end_date=df["Order Date"].max()
            )
        ], style={"width":"30%", "display":"inline-block", "padding":"10px"}),
    ]),

html.Div([
        dcc.Graph(id="sales_trend"),
        dcc.Graph(id="sales_region"),
        dcc.Graph(id="profit_category")
    ])

[Output("sales_trend", "figure"),
     Output("sales_region", "figure"),
     Output("profit_category", "figure")],
[Input("region_filter", "value"),
     Input("category_filter", "value"),
     Input("date_filter", "start_date"),
     Input("date_filter", "end_date")]

def update_charts(selected_regions, selected_cats, start_date, end_date):
    dff = df.copy()
    dff = dff[(dff["Region"].isin(selected_regions)) &
              (dff["Category"].isin(selected_cats)) &
              (dff["Order Date"] >= pd.to_datetime(start_date)) &
              (dff["Order Date"] <= pd.to_datetime(end_date))]

sales_trend = df.groupby("YearMonth")["Sales"].sum().reset_index()
fig1 = px.line(sales_trend, x="YearMonth", y="Sales", title="Sales Over Time", markers=True)
fig1.show()

region_sales = df.groupby("Region")["Sales"].sum().reset_index()
fig2 = px.bar(region_sales, x="Region", y="Sales", title="Sales by Region", color="Region")
fig2.show()

category_profit = df.groupby("Category")["Profit"].sum().reset_index()
fig3 = px.bar(category_profit, x="Category", y="Profit", title="Profit by Category", color="Category")
fig3.show()